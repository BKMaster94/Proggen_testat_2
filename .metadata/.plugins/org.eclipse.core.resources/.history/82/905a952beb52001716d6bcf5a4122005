//////////////////////////////////////////////////////////////////////////////
//Variablen Initialisierung 
//////////////////////////////////////////////////////////////////////////////
var express = require('express'); // Express wird initialisert
var appServer = express(); 
var server = appServer.listen(8081, function(){ // Server wird gestartet und Hört auf den Jeweiligen Port!
	console.log("Server gestartet auf Port: 8081");	// Consolen ausgabe zur überprüfung ob der Server Startet
});
var io = require('socket.io').listen(server); // IO wird aufgesetzt auf das http.server Objekt
var bodyParser = require('body-parser'); // Initialisierung des Body-Parsers
var path = require('path'); // Lokale Path Variable für die Dateisuche 
var ClientZaehler = 0; // Zählt wie viele Clients auf dem Server zugreifen über Socket.io
var TempSpielerName = "empty"; // Temporärer Namens Halter für den Client
var wertDrin = [false,false,false,false,false,false,false,false,false]; // Switch für häufigkeit des Klickens | JA ist nicht optimal :)
var spieler1= null; // Wird benutzt um den Namen von Spieler1 weiter zu geben
var spieler2= null; // Wird benutzt um den Namen von Spieler2 weiter zu geben
var SpielerFeldID = [null,null,null,null,null,null,null,null,null]; // Hier wird die ID vom Jeweiligen Spieler eingetragen der ein Feld anklickt // Dient zur Gewinn Suche!
var zeichenXO = "";//Das Zeichen "X" oder "O" im normalfall
var zuege = 0;//anzahl der schon gemachten Zuege
var i = 0;
//////////////////////////////////////////////////////////////////////////////
//Variablen Initialisierung ENDE
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//Body-Parser
//////////////////////////////////////////////////////////////////////////////
appServer.use(bodyParser.urlencoded({ // brauchen wir für das Parsen vom Request body block
	extended: true 
}));
//////////////////////////////////////////////////////////////////////////////
//Body-Parser ENDE
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//Socket.IO Block!
//////////////////////////////////////////////////////////////////////////////
	io.on('connection', function(client){ // die Verbindung wird hergestellt zwischen server und Client.
		client.on('username', function() { // Beim emit von 'username' wird der client getzwungen einen usernamen anzunehemen. // Falls keiner exestiert === 'emtpy';
			client.username = TempSpielerName; // Name wird zugewiesen und kann von jetzt aus drauf zugegriffen werden mit client.username
			console.log('A user is Connectet: ' + client.username + " | ID: " + client.id); // Diese abfrage wird beibehalten für die Übersicht und des Testens
			ClientZaehler = ClientZaehler +1; // Da ein Client jetzt komplett Verbunden ist wird der Zähler erhöht
			client.on('disconnect', function(){ // Falls ein Nutzer die Verbindung Trennt 
				ClientZaehler = ClientZaehler -1; // wird der Zähler runtergesetzt;
				console.log("Client disconnected: " + client.username + " | ID: " + client.id); // Dann wird Ausgegeben welcher benutzer Rausgegeangen ist
				console.log("Momentane user: " + ClientZaehler); // Und die Momentanten Benutzer angezeigt. für die Übersicht
			});			
			if(ClientZaehler <= 2 ){ // Wir erstellen ein Spiele raum wo sich 2 Benutzer Treffen können
				client.join('SpielRaum'); // Der Client wird dem SpielRaum hinzugefügt, solange es nicht mehr als 2 Clients sind.
				if (ClientZaehler === 1){ // Wenn der erste Client Connectet ist im SpieleRaum
					client.id = Math.round(Math.random()); // Es wird zufällig bestimmt wo der Erste Client stehen wird und dies wird in der ID festgehalten || Entweder 0 oder 1 
					if (client.id === 0){ // Wenn die Client id === 0 ist
						spieler1 = client.username; // Wird der Benutzername Abgespeichert in die Spieler1 Variable.
					}
					if(client.id === 1){// Bei ID === 1
						spieler2 = client.username; // Wird der Benutzername als Spieler2 Abgespeichert.
					}
					console.log("Spieler: " + client.id + " | Spilername: " + client.username); // Diese Abfrage wird beibehalten aus übersichtlichen Gründen.
				}
				if(ClientZaehler === 2){ // Wenn der Zweite Client Verbunden ist  							
					if(spieler1 === null){ // Wird überprüft ob der erste nutzer Spiler 1 ist oder 2
						spieler1 = client.username; // Dann wird jeweils der Name gesetzt
						client.id = 0; // und natürlich auch die Spieler Position			
					}
					if(spieler2 === null){
						spieler2 = client.username;
						client.id = 1;
					}
					console.log("Spieler: " + client.id + " | Spilername: " + client.username);// Diese Abfrage wird beibehalten aus übersichtlichen Gründen.
					
					io.to('SpielRaum').emit('SpielerName1', spieler1); // Nun werden die Spilerdaten übergeben an die Clients
					io.to('SpielRaum').emit('SpielerName2', spieler2); // Nun werden die Spilerdaten übergeben an die Clients
					spieler1=null; // danach werden die Variablen zurück gesetzt um ein Neustart zu ermöglichen
					spieler2=null; 
				}
				io.to('SpielRaum').emit('gameReady', ClientZaehler); // Nun wird jetzt die Spieleranzahl übergeben, damit die Clients auch wissen können wann beide Im Raum sind
			}
			console.log("Momentane user: " + ClientZaehler); // Und die Momentanten Benutzer angezeigt. für die Übersicht
	    });
//////////////////////////////////////////////////////////////////////////////
//Socket.IO || Feld Abfragen
//////////////////////////////////////////////////////////////////////////////
		client.on('S1Z_Eins', function(){ //Es wurde das Feld .. Angeklickt	
		if(client.id === zuege%2){ // wenn die id des Spielers gleich der zuege modulo 2 ist... somit immer abwechselnd
			if(wertDrin[0] === false){ // Falls das Feld noch nicht geklickt worden ist darf geklickt werden sonst nicht !
			if(zuege%2===0){ // Wenn Spieler 1 Dran ist
				zeichenXO = "X"; // Das Zeichen des Spielers wird weiter gegeben
				wertDrin[0] = true; // Switch wird umgelegt
				SpielerFeldID[0] = 0; // Der Spieler wird sich gemerkt für die Gewinnberechnung
			}
			else{ // Wenn Spieler 2 Dran ist
				zeichenXO = "O"; // Das Zeichen des Spielers wird weiter gegeben
				wertDrin[0] = true; // Switch wird umgelegt
				SpielerFeldID[0] = 1; // Der Spieler wird sich gemerkt für die Gewinnberechnung
			}
			zuege++; // der zug wird erhöht
			io.to('SpielRaum').emit('S1Z_EinsEmiter', zeichenXO); // Das Zeichen wird an alle Clients weitergegeben die Im Spielraum sind
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
// Nun wiederholt sich alles für jedes Feld Wird durch kometare Abgetrennt zur Ordnung
//////////////////////////////////////////////////////////////////////////////
		client.on('S1Z_Zwei', function(){
		if(client.id === zuege%2){
			if(wertDrin[1] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[1] = true;
				SpielerFeldID[1] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[1] = true;
				SpielerFeldID[1] = 1;
			}
			zuege++;
			io.to('SpielRaum').emit('S1Z_ZweiEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
		client.on('S1Z_Drei', function(){
		if(client.id === zuege%2){
			if(wertDrin[2] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[2] = true;
				SpielerFeldID[2] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[2] = true;
				SpielerFeldID[2] = 1;
			}
			zuege++;
			io.to('SpielRaum').emit('S1Z_DreiEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
		client.on('S2Z_Eins', function(){
		if(client.id === zuege%2){
			if(wertDrin[3] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[3] = true;
				SpielerFeldID[3] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[3] = true; 
				SpielerFeldID[3] = 1;
			}
			zuege++;
			io.to('SpielRaum').emit('S2Z_EinsEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
		client.on('S2Z_Zwei', function(){
		if(client.id === zuege%2){
			if(wertDrin[4] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[4] = true;
				SpielerFeldID[4] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[4] = true;
				SpielerFeldID[4] = 1;
			}
			zuege++;
			io.to('SpielRaum').emit('S2Z_ZweiEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
		client.on('S2Z_Drei', function(){

		if(client.id === zuege%2){
			if(wertDrin[5] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[5] = true;
				SpielerFeldID[5] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[5] = true;
				SpielerFeldID[5] = 1;
			}
			zuege++;
			io.to('SpielRaum').emit('S2Z_DreiEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
		client.on('S3Z_Eins', function(){
		if(client.id === zuege%2){
			if(wertDrin[6] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[6] = true;
				SpielerFeldID[6] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[6] = true;
				SpielerFeldID[6] = 0;
			}
			zuege++;
			io.to('SpielRaum').emit('S3Z_EinsEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
		client.on('S3Z_Zwei', function(){
		if(client.id === zuege%2){
			if(wertDrin[7] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[7] = true;
				SpielerFeldID[7] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[7] = true;
				SpielerFeldID[7] = 1;
			}
			zuege++;
			io.to('SpielRaum').emit('S3Z_ZweiEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
		client.on('S3Z_Drei', function(){
		if(client.id === zuege%2){
			if(wertDrin[8] === false){
			if(zuege%2===0){
				zeichenXO = "X";
				wertDrin[8] = true;
				SpielerFeldID[8] = 0;
			}
			else{
				zeichenXO = "O";
				wertDrin[8] = true;
				SpielerFeldID[8] = 1;
			}
			zuege++;
			io.to('SpielRaum').emit('S3Z_DreiEmiter', zeichenXO);
			}
		}
	});
//////////////////////////////////////////////////////////////////////////////
//Socket.IO || Feld Abfragen || ENDE
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//Socket.IO || Gewinn Ermittlung ||
//////////////////////////////////////////////////////////////////////////////
		client.on('WennGewonnen', function(){
			console.log("Wir sind bei Zug: " + zuege);
			if(zuege > 4){
				console.log("Suche Gewinner");
				console.log(" 0: " + SpielerFeldID[0] + " 1: " + SpielerFeldID[1] + " 2: " + SpielerFeldID[2] + " 3: " + SpielerFeldID[3] + " 4: " + SpielerFeldID[4] + " 5: " + SpielerFeldID[5] + " 6: " + SpielerFeldID[6] + " 7: " + SpielerFeldID[7] + "8: " + SpielerFeldID[8]);
				
				if(SpielerFeldID[0] === 1 && SpielerFeldID[1] === 1 && SpielerFeldID[2] === 1 || SpielerFeldID[0] === 0 && SpielerFeldID[1] === 0 && SpielerFeldID[2] === 0 ){ // Wagerecht Oben
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , SpielerFeldID[0]+1);
				}
				if(SpielerFeldID[3] === 1 && SpielerFeldID[4] === 1 && SpielerFeldID[5] === 1 || SpielerFeldID[3] === 0 && SpielerFeldID[4] === 0 && SpielerFeldID[5] === 0 ){ // Wagerecht Mitte
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , SpielerFeldID[6]+1);
				}
				if(SpielerFeldID[6] === 1 && SpielerFeldID[7] === 1 && SpielerFeldID[8] === 1 || SpielerFeldID[6] === 0 && SpielerFeldID[7] === 0 && SpielerFeldID[8] === 0 ){ // Wagerecht Unten
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , SpielerFeldID[3]+1);
				}
				if(SpielerFeldID[0] === 1 && SpielerFeldID[3] === 1 && SpielerFeldID[6] === 1 || SpielerFeldID[0] === 0 && SpielerFeldID[3] === 0 && SpielerFeldID[6] === 0 ){ // Senkrecht Links
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' ,  SpielerFeldID[0]+1);
				}
				if(SpielerFeldID[1] === 1 && SpielerFeldID[4] === 1 && SpielerFeldID[7] === 1 || SpielerFeldID[1] === 0 && SpielerFeldID[4] === 0 && SpielerFeldID[7] === 0 ){ // Senkrecht Mitte
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , SpielerFeldID[2]+1);
				}
				if(SpielerFeldID[2] === 1 && SpielerFeldID[5] === 1 && SpielerFeldID[8] === 1 || SpielerFeldID[2] === 0 && SpielerFeldID[5] === 0 && SpielerFeldID[8] === 0 ){ // Senkrecht Rechts
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , SpielerFeldID[1]+1);
				}
				if(SpielerFeldID[0] === 1 && SpielerFeldID[4] === 1 && SpielerFeldID[8] === 1 || SpielerFeldID[0] === 0 && SpielerFeldID[4] === 0 && SpielerFeldID[8] === 0 ){ // Quer Oben Links Unten Rechts
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , SpielerFeldID[0]+1);
				}
				if(SpielerFeldID[2] === 1 && SpielerFeldID[4] === 1 && SpielerFeldID[6] === 1 || SpielerFeldID[2] === 0 && SpielerFeldID[4] === 0 && SpielerFeldID[6] === 0 ){ // Quer Oben Rechts Unten Links
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , SpielerFeldID[2]+1);
				}
				

				if(zuege === 9){
					zuege = 0;
					for(i=0;i < SpielerFeldID.length;i++){
						SpielerFeldID[i] = null;		
						wertDrin[i] = false;
					}
					io.emit('Gewonnen' , 'Unentschieden');
				}
			}
		});
//////////////////////////////////////////////////////////////////////////////
//Socket.IO || Gewinn Ermittlung || ENDE
//////////////////////////////////////////////////////////////////////////////
	});
//////////////////////////////////////////////////////////////////////////////
//Socket.IO Block! || ENDE
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//Node Route
// req = Request || res = Respond
//////////////////////////////////////////////////////////////////////////////
appServer.get('/', function(req,res){ // Url Abfangen 
	res.sendFile(path.resolve('HTML/Anmeldung.html')); // Nimm die HTML Datei aus dem Ordner
});

appServer.get('/Ajax/testAuslagerung.js', function(req,res){ // URL Abfangen
	res.sendFile(path.resolve('Ajax/testAuslagerung.js')); // Lade die Javascript datei ein.
});

appServer.get('/CSS/StyleIndex.css', function(req,res){ // URL Abfangen
	res.sendFile(path.resolve('CSS/StyleIndex.css')); // Lade die CSS datei ein.
});

appServer.post('/SpielerNamenBekommen', function (req,res){ //der SpielerName wird durch ein JSON an den server geschickt
	res.status(200).json(req.body);//Der Status "Success" wird übergeben und ein json Obj wird zurückgeschickt
	TempSpielerName = req.body.player; // Wert es JSON Objektes wird in eine Variable geschrieben. // wird der Benutzername Des Clients mit Socket.io()
});

appServer.get('/TicTacToeSpiel', function (req,res){ // Die Momentane Seite soll gewaechselt werden
	res.sendFile(path.resolve('HTML/Index.html')); // Die Datei HTML/Index.html wird an den client geschickt
});
//////////////////////////////////////////////////////////////////////////////
//Node Route Ende
//////////////////////////////////////////////////////////////////////////////